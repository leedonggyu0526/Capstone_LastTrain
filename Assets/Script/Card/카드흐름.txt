1) 데이터·리소스 준비
    1.CSV 파일
        위치: Assets/Resources/CardData.csv
        형식(예시):
            cardID,cardName,description,background,artwork,rarity
            1,gold,gold ticket,UI_image/goldCard,UI_image/food,Epic
            2,silver,silver ticket,UI_image/silverCard,UI_image/fuel,Rare
            3,copper,copper ticket,UI_image/copperCard,UI_image/gear,Common
        이미지 파일(background, artwork): Assets/Resources/UI_image/*.png
    2.카드 데이터 컨테이너(SO = ScriptableObject)
        CardData.cs (ScriptableObject): 스크립터블오브젝트를만듬

2) CSV → CardData 변환 (런타임 생성)
    CardCsvLoader.cs
        역할: CSV 한 줄을 파싱해 CardData 인스턴스를 만들어 반환
        핵심 동작:
            string[] cols = line.Split(',');
            ScriptableObject.CreateInstance<CardData>();
            data.cardID / name / description 채우기
            Resources.Load<Sprite>(backgroundKey/artKey)로 스프라이트 로드
            data.rarity = cols[5].Trim();

3) CardData → 카드 UI 적용
    CardDisplay.cs
        역할: CardData를 받아 UI에 뿌리기
        연결 필드(인스펙터): backgroundImage, artworkImage, titleText, descriptionText
        RefreshUI() 내부:
            titleText.text = cardData.cardName
            descriptionText.text = cardData.description
            artworkImage.sprite = cardData.artwork
            backgroundImage.sprite = cardData.background
        중요: 이 4개 참조가 프리팹에서 실제로 연결돼 있어야 화면에 뜸.

4) 프리팹 생성 & 배치 (화면에 찍기)
    CardSpawner.cs
        역할: CSV를 읽고 카드 프리팹을 Instantiate해서 화면에 배치
        인스펙터:
            cardPrefab: 카드 UI 프리팹 (CardDisplay + CardDrag 붙어있어야 함)
            parentTransform: 카드가 붙을 부모(예: CardPanel)
        동작 흐름:
            1.Awake()에서 TextAsset csv = Resources.Load<TextAsset>("CardData") → 줄 배열로 보관(헤더 제외)
            2.SpawnRandomCard(Vector2 pos) → 보관한 줄 중 하나 랜덤 선택
            3.SpawnFromCsvLine(line, pos)
              CardCsvLoader.CreateFromCsvRow(cols) → CardData 생성
              Instantiate(cardPrefab, parentTransform)
              RectTransform.anchoredPosition = pos
              display.cardData = data; display.RefreshUI()
              drag.cardID = data.cardID (이벤트 매칭용)
        한마디로: 스포너가 CSV 한 줄 → CardData → 프리팹 생성 → UI 채움 까지 다 함

5) 씬에서 실제로 보이게 연결
    1.카드 프리팹 준비
        CardDisplay 붙여서 이미지/텍스트 참조 연결
        CardDrag 붙여서 드래그 동작 가능
    2.CardSpawner 배치
        빈 오브젝트에 CardSpawner 추가
        cardPrefab, parentTransform 연결
        (테스트) Start()에서 원하는 좌표로 호출:
            void Start() {
                // 예: 카드 1장 화면 중앙에
                GetComponent<CardSpawner>().SpawnRandomCard(new Vector2(0, 0));
            }
    3.플레이
        CSV에서 랜덤으로 한 줄이 읽혀 카드가 생성되고,
        CardDisplay가 이미지를 세팅하고 텍스트를 채워 바로 화면에 표시됨.
    
6) 자주 생기는 문제 & 빠른 체크
    이미지가 안 뜬다
        Assets/Resources/UI_image/파일명.png 위치/이름 확인
        CSV에는 UI_image/파일명(확장자 X)로 적었는지 확인
        CardCsvLoader에서 경로 로그 출력해보기
    텍스트가 안 바뀐다
        프리팹에 있는 CardDisplay의 참조들이 모두 연결되어 있는지
        display.RefreshUI()가 호출되는지
    생성은 되는데 화면에서 안 보인다
        parentTransform이 Canvas 하위인지
        RectTransform.anchoredPosition 좌표가 화면 안인지
        CanvasScaler/해상도 영향 확인
    드래그/드랍이 이상하다
        CardDrag가 붙어 있는지, CanvasGroup/Raycast Target 적절한지
        DropZone 태그(DropZone) 설정되어 있는지

7) (선택) 게임 루프와 연동
    DropZone에서 드랍 성공 시:
        eventSpawner.DestroyCurrentEvent()
        카드 Destroy
        spawner.SpawnRandomCard(원래 자리) 로 보충
    EventSpawner에서 이벤트 발생 중이면 currentEventID에 보관
    CardDrag.cardID (string)와 currentEventID.ToString() 비교로 매칭

한 줄 요약
    CSV의 한 줄이 CardCsvLoader에서 CardData로 바뀌고,
    CardSpawner가 프리팹을 생성한 뒤 CardDisplay.RefreshUI()로 이미지/텍스트를 채워 화면에 출력한다.
    인스펙터에서 프리팹 참조/부모, UI 참조만 제대로 연결돼 있으면 바로 동작!
